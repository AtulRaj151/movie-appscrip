{"version":3,"sources":["Components/MovieCard.js","action/index.js","action/actionTypes.js","Components/Navbar.js","Components/App.js","reducers/movies.js","reducers/search.js","reducers/index.js","index.js","store/index.js"],"names":["MovieCard","movie","this","props","className","alt","src","poster_path","title","overview","vote_average","Component","handleMovieSearch","url","dispatch","fetch","then","response","json","type","addMoviesSearchResult","results","Navbar","handleChange","e","setState","searchText","target","value","handleSearch","state","placeholder","onChange","id","onClick","React","connect","search","App","length","map","index","key","initialStates","movies","combineReducers","action","undefined","store","createStore","reducer","applyMiddleware","thunk","logger","console","log","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sQA4BeA,E,uKAzBJ,IAECC,EAAUC,KAAKC,MAAfF,MACR,OACE,6BACE,yBAAKG,UAAU,cACb,yBAAKA,UAAU,QACb,yBACEC,IAAI,eACJC,IAAG,0CAAqCL,EAAMM,gBAGlD,yBAAKH,UAAU,SACb,yBAAKA,UAAU,SAASH,EAAMO,OAC9B,yBAAKJ,UAAU,QAAQH,EAAMQ,UAC7B,yBAAKL,UAAU,UACb,yBAAKA,UAAU,UAAUH,EAAMS,sB,GAjBrBC,aCAjB,SAASC,EAAkBX,GAEhC,IAAMY,EAAG,mGAA+FZ,GAExG,OAAO,SAAUa,GACfC,MAAMF,GACHG,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACf,GAKLa,EAID,SAA+Bb,GACpC,MAAO,CACLkB,KCnB6B,oBDoB7BlB,SAPamB,CAAsBnB,EAAMoB,c,IEVvCC,E,kDACJ,aAAe,IAAD,8BACZ,gBAMFC,aAAe,SAACC,GACd,EAAKC,SAAS,CACZC,WAAYF,EAAEG,OAAOC,QAIvB,EAAKzB,MAAMW,SAASF,EAAkBY,EAAEG,OAAOC,SAbnC,EAgBdC,aAAe,WAAO,IACZH,EAAe,EAAKI,MAApBJ,WACR,EAAKvB,MAAMW,SAASF,EAAkBc,KAhBtC,EAAKI,MAAQ,CACXJ,WAAY,IAHF,E,qDAqBZ,OACE,yBAAKtB,UAAU,OACb,yBAAKA,UAAU,oBACb,2BAAO2B,YAAY,oBAAoBC,SAAU9B,KAAKqB,eACtD,4BAAQU,GAAG,aAAaC,QAAShC,KAAK2B,cAAtC,gB,GA1BWM,IAAMxB,WAwCZyB,mBALf,YACE,MAAO,CACLC,OAFiC,EAAVA,UAKZD,CAAyBd,GCvClCgB,E,uKAGM,IAAD,OAECD,EAAWnC,KAAKC,MAAMkC,OAAtBA,OAER,OACE,yBAAKjC,UAAU,OAEb,kBAAC,EAAD,MAEmB,IAAlBiC,EAAOE,OACNF,EAAOG,KAAI,SAACvC,EAAOwC,GAAR,OACT,kBAAC,EAAD,CACExC,MAAOA,EACPyC,IAAG,iBAAYD,GACf3B,SAAU,EAAKX,MAAMW,cAIzB,qD,GArBQqB,IAAMxB,WAoCTyB,mBARf,SAAyBN,GACvB,MAAO,CACL7B,MAAO6B,EAAM7B,MACboC,OAAQP,EAAMO,UAKHD,CAAyBE,G,gCCzClCK,EAAgB,CACpBC,OAAQ,I,WCCJD,EAAgB,CACpBN,OAAQ,ICGKQ,kBAAgB,CAC7BD,OFJK,WAAgD,IAAhCd,EAA+B,uDAAvBa,EAC7B,OAAOb,GEIPO,ODHK,WAAgD,IAAhCP,EAA+B,uDAAvBa,EAAeG,EAAQ,uCACpD,OAAQA,EAAO3B,MACb,IJN6B,oBIQ3B,YAAqB4B,IAAjBD,EAAO7C,MACF,eACF6B,GAIA,2BACFA,GADL,IAEEO,OAAQS,EAAO7C,QAEnB,QACE,OAAO6B,MEdb,IAAMkB,ECKIC,YAAYC,EAASC,YAAgBC,IAAOC,MDJtDC,QAAQC,IAAIP,GACZQ,IAASC,OAEP,kBAAC,IAAD,CAAUT,MAAOA,GACf,kBAAC,IAAMU,WAAP,KACE,kBAAC,EAAD,QAGJC,SAASC,eAAe,W","file":"static/js/main.b3950e8a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nclass MovieCard extends Component {\r\n  render() {\r\n    //   destructure the movie component\r\n    const { movie } = this.props;\r\n    return (\r\n      <div>\r\n        <div className=\"movie-card\">\r\n          <div className=\"left\">\r\n            <img\r\n              alt=\"movie-poster\"\r\n              src={`https://image.tmdb.org/t/p/w500/${movie.poster_path}`}\r\n            />\r\n          </div>\r\n          <div className=\"right\">\r\n            <div className=\"title\">{movie.title}</div>\r\n            <div className=\"plot\">{movie.overview}</div>\r\n            <div className=\"footer\">\r\n              <div className=\"rating\">{movie.vote_average}</div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default MovieCard;\r\n","import { AdD_SEARCH_RESULT } from \"./actionTypes\";\r\n// fetch the movie from api using any search query\r\nexport function handleMovieSearch(movie) {\r\n  //   const url = `https://api.themoviedb.org/3/movie/550?api_key=c23b9b937869901715c463911583ed92&query=${movie}`;\r\n  const url = `https://api.themoviedb.org/3/search/movie?api_key=c23b9b937869901715c463911583ed92&query=${movie}`;\r\n  //   here it returns dispact the movie into reducer\r\n  return function (dispatch) {\r\n    fetch(url)\r\n      .then((response) => response.json())\r\n      .then((movie) => {\r\n        // console.log(\"movies = \", movie);\r\n\r\n        //dispatch an action\r\n        // dispatch ({ type:'AdD_SEARCH_RESULT,movie})\r\n        dispatch(addMoviesSearchResult(movie.results));\r\n      });\r\n  };\r\n}\r\nexport function addMoviesSearchResult(movie) {\r\n  return {\r\n    type: AdD_SEARCH_RESULT,\r\n    movie,\r\n  };\r\n}\r\n","// action creater types\r\nexport const AdD_SEARCH_RESULT = \"ADD_SEARCH_RESULT\";\r\n","import React from \"react\";\r\nimport { handleMovieSearch } from \"../action/index\";\r\nimport { connect } from \"react-redux\";\r\n\r\nclass Navbar extends React.Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      searchText: \"\",\r\n    };\r\n  }\r\n  //  a handle change function so the each time when you type we will get result\r\n  handleChange = (e) => {\r\n    this.setState({\r\n      searchText: e.target.value,\r\n    });\r\n    //  dispact the action\r\n\r\n    this.props.dispatch(handleMovieSearch(e.target.value));\r\n  };\r\n  //    if we click on search button then it return the required result\r\n  handleSearch = () => {\r\n    const { searchText } = this.state;\r\n    this.props.dispatch(handleMovieSearch(searchText));\r\n  };\r\n  render() {\r\n    return (\r\n      <div className=\"nav\">\r\n        <div className=\"search-container\">\r\n          <input placeholder=\"Search movies....\" onChange={this.handleChange} />\r\n          <button id=\"search-btn\" onClick={this.handleSearch}>\r\n            Search\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction mapStatetoProps({ search }) {\r\n  return {\r\n    search,\r\n  };\r\n}\r\nexport default connect(mapStatetoProps)(Navbar);\r\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport MovieCard from \"./MovieCard\";\nimport Navbar from \"./Navbar\";\n\nclass App extends React.Component {\n  // console.log(\"Store\", search);\n\n  render() {\n    //  destructure the search value\n    const { search } = this.props.search;\n    // console.log(\"search is here \", search);\n    return (\n      <div className=\"App\">\n        {/* add component navbar */}\n        <Navbar />\n        {/*  add component Moviecard from search result */}\n        {search.length === 0 ? (\n          search.map((movie, index) => (\n            <MovieCard\n              movie={movie}\n              key={`movies-${index}`}\n              dispatch={this.props.dispatch}\n            />\n          ))\n        ) : (\n          <h1>Movies not Found</h1>\n        )}\n      </div>\n    );\n  }\n}\n//  map state to props so that we can connect this component to store\nfunction mapStateToProps(state) {\n  return {\n    movie: state.movie,\n    search: state.search,\n  };\n}\n\n//  wrapper function that takes states and return the wrapper components\nexport default connect(mapStateToProps)(App);\n","const initialStates = {\r\n  movies: [],\r\n};\r\nexport function movies(state = initialStates, action) {\r\n  return state;\r\n}\r\n","import { AdD_SEARCH_RESULT } from \"../action/actionTypes\";\r\n\r\nconst initialStates = {\r\n  search: [],\r\n};\r\nexport function search(state = initialStates, action) {\r\n  switch (action.type) {\r\n    case AdD_SEARCH_RESULT:\r\n      // handle change function return undefined then simply return\r\n      if (action.movie === undefined) {\r\n        return {\r\n          ...state,\r\n        };\r\n      }\r\n      //    else return the new state\r\n      return {\r\n        ...state,\r\n        search: action.movie,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n}\r\n","import { combineReducers } from \"redux\";\r\nimport { movies } from \"./movies\";\r\nimport { search } from \"./search\";\r\n// combine reducer\r\n//  here movies is use to store the for future result\r\n//  I have implemented here only search result\r\nexport default combineReducers({\r\n  movies, //movies stores the list of movies when the pages loads or from database : TODO Later\r\n  search,\r\n});\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport { Provider } from \"react-redux\";\nimport App from \"./Components/App\";\nimport { configureStore } from \"./store\";\nconst store = configureStore();\nconsole.log(store);\nReactDOM.render(\n  // use provider to pass store to each components\n  <Provider store={store}>\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport logger from \"redux-logger\";\r\nimport thunk from \"redux-thunk\";\r\nimport reducer from \"../reducers\";\r\n\r\nlet store;\r\n\r\n// a configureStore function to initialise store\r\n// use of middleware redux thunk that return function by passing action creater\r\n// logger is used to keep us updated the changes in the state\r\nexport function configureStore() {\r\n  store = createStore(reducer, applyMiddleware(thunk, logger));\r\n  return store;\r\n}\r\n"],"sourceRoot":""}